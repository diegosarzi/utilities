#!/usr/bin/env bash
#=====================HEADER=========================================|
#AUTOR
# Jefferson 'slackjeff' Rocha <root@slackjeff.com.br>
#
#LICENCE
# MIT
#
#Package
# name-version-architeture.mz
#
#VERSION
# 1.2
#
#CHANGELOG
# (VERSÃO 1.1) - Jefferson Rocha
#  - Agora o programa cria somente a lista se caso necessitar.
#
# (VERSÃO 1.2) - Jefferson Rocha
#  - Adicionado conferencia se nome do pacote tem caracteres não 
#  permitidos. (Espaços, #, !, @) etc...
#====================================================================|

#===============VARIAVEIS
format_pkg='mz'            # Extensão do pacote
local_list="var/log/list/"  # Localização da lista
#========Colors
red='\033[31;1m'
blue='\033[34;1m'
cyan='\033[36;1m'
pink='\033[35;1m'
end='\033[m'

#===============TESTES
# Sem root não vai amiguinho.
[[ "$UID" -ne '0' ]] && { echo "Root is required."; exit 1 ;}

# Limpando todas variáveis do ambiente para
# não ter futuros problemas.
var_list=(
   'maintainer' 'pkgname' 'desc' 'version' 'url'
)
for hellclean in "${var_list[@]}"; do
    unset "${hellclean}"
done

# Criando diretórios se não existirem.
for createdir in '/var/log/list' '/var/log/desc'; do
    [[ ! -d "$createdir" ]] && mkdir -p "$createdir"
done

#===============FUNCOES
_HELP_pt()
{
    cat <<EOF | less
createpkg - Simples ferramenta para empacotamento

OPÇÕES:

-n, --name
  NomeDoPacote-Versão.mz

-c, --create-list
  NomeDoPacote-Versão

-h, --help
  Exibe essa ajuda e sai

COMO USAR?

  Para usar o createpkg é NECESSÁRIO após você fazer o fakeroot
  do programa que você compilou entrar dentro do mesmo. Após isso
  você pode executar com o parâmetro -n ou --name e o nome do pacote.
  Um Exemplo básico! Supondo que você acabou de compilar e fez um fakeroot em
  /tmp/build/firefox_quantum54.0, olhando dentro do diretório todos diretórios
  subdiretórios e arquivos estão presentes no mesmo.
 
  Após fazer a manipulação, inserindo e talvez retirando coisas, chegou a hora
  de rodar o createpkg para criar um simples pacote! Execute como root:

  # createpkg -n "firefox_quantum-54.0.mz"
  
  Serão gerados dois arquivos um diretório acima que são eles:
  "firefox_quantum-54.0.mz" e "firefox_quantum-54.0.sha256"
  
  NOTA!
  O nome do pacote não deve exceder mais de 2 traços ( - ), eles são os divisores
  do nome do pacote para a versão do pacote e da versão do pacote para arquitetura
  e somente isto!
  Se caso vocẽ necessitar separar o nome do pacote como google chrome, não use - prefira
  usar o ( _ ), exemplo:

  createpkg -n "google_chrome-64.5.9.2.mz"

LISTAS

  No processo de empacotamento é gerado uma lista de todos arquivos contidos no diretório
  do programa que você está empacotando. Está lista é armazenada dentro do pacote em:
  var/log/list/Programa-versao.list
 
  Está lista é de extrema importância para remover o programa e seus arquivos com o
  utilitário burnpkg. E também desta maneira você tem um controle do que está em seu sistema

AUTOR

  Jefferson 'Slackjeff' Rocha <root@slackjeff.com.br>

LICENÇA

  MIT
EOF
}

# Função para verificação do diretório (info)
# e seus arquivos.
_VERIFY_ON()
{
    # Variaveis locais
    local dir_info='info' # Diretorio info que contem informações como (desc)
    local info_desc='desc'
    
    if [[ ! -d "$dir_info" ]]; then # Diretório info existe?
        echo -e "${red}[ERROR!]${end} ${pink}${dir_info}${end} directory\n"
        echo -e "It's necessary your package have the directory ${pink}info${end}."
        echo -e "${pink}${dir_info}${end} its a directory store important archives."
        echo "For more information use -h, --help."
        exit 1
    elif [[ ! -e "${dir_info}/${info_desc}" ]]; then
        echo -e "${red}[ERROR!]${end} ${pink}${info_desc}${end} archive\n"
        echo -e "It's necessary your package have the archive ${pink}desc${end} inside of directory '${dir_info}'."
        echo -e "${pink}${info_desc}${end} have informations of your package."
        echo "For more information use -h, --help."
        exit 1
    else
    # Se caiu aqui está tudo certo, vamo então conferir as variaveis do 'desc'
    # Se alguma variavel estiver nula não podemos continuar.
        source ${dir_info}/${info_desc} # Carregando arquivo.
        if [[ -z "$maintainer" ]]; then
            echo -e "Check ${pink}${info_desc}${end}, variable ${blue}maintainer${end} null"
            echo "Enter the name of the package maintainer into variable maintainer."
            exit 1
        elif [[ -z "$pkgname" ]]; then
            echo -e "Check ${pink}${info_desc}${end}, variable ${blue}pkgname${end} null"
            echo "Enter the name of the package into variable pkgname."
            exit 1
        elif [[ -z "$desc" ]]; then
            echo -e "Check ${pink}${info_desc}${end}, variable ${blue}desc${end} null"
            echo "Detail a small description into variable desc."
            exit 1
        elif [[ -z "$version" ]]; then
            echo -e "Check ${pink}${info_desc}${end}, variable ${blue}version${end} null"
            echo "Enter a version of software into variable version."
            exit 1
        elif [[ -z "$url" ]]; then
            echo -e "Check ${pink}${info_desc}${end}, variable ${blue}url${end} null"
            echo "Enter a url of project/software into variable url."
            exit 1
        fi
        # Conferindo se o nome do pacote e versão batem com o que
        # o usuario passou em linha, se não bater não devemos continuar.
        if [[ "$pkgname" != "$(echo "$package" | cut -d '-' -f '1')" ]]; then
            echo -e "Check ${pink}${info_desc}${end}, variable ${blue}pkgname${end} it different"
            echo "of the name you entered as an argument. Check and return ;)"
            exit 1
        elif [[ "$version" != $(echo "$package" | cut -d '-' -f '2' | sed 's/\.mz//') ]]; then
            echo -e "Check ${pink}${info_desc}${end}, variable ${blue}version${end} it different"
            echo "of the version you entered as an argument. Check and return ;)"
            exit 1
        else
            echo -e "${blue}[CHECK VARIABLES]${end} OK."
            return
        fi
    fi # if principal
}

_LIST_ARCHIVES_DIRECTORIES()
{
    echo -e "${blue}[Create]${end} ${package}.list in temporary local: $temp_list"
    # Pegando todos arquivos que possui no diretório
    # menos os listados abaixo, isso implica em futuros erros.
    find .                        \
       \( ! -name bin \)          \
       \( ! -name boot \)         \
       \( ! -name dev \)          \
       \( ! -name etc \)          \
       \( ! -name home \)         \
       \( ! -name lib \)          \
       \( ! -name lib64 \)        \
       \( ! -name lost+found \)   \
       \( ! -name media \)        \
       \( ! -name mnt \)          \
       \( ! -name opt \)          \
       \( ! -name proc \)         \
       \( ! -name root \)         \
       \( ! -name run \)          \
       \( ! -name sbin \)         \
       \( ! -name srv \)          \
       \( ! -name sys \)          \
       \( ! -name tmp \)          \
       \( ! -name usr \)          \
       \( ! -name var \)          \
       \( ! -name info \)         \
      -print > "$temp_list"
}

# Função para fazer a limpa na (pacote).list
# Para ter a certeza absoluta que não haverá problemas ;)
# Se caso o arquivo ou diretório estiver solto ele será
# removido.
_CLEAN_LIST()
{
    echo -e "${cyan}[Clean]${end} List: $temp_list"
    # Apagando linhas desnecessárias na lista
    # E substituindo
    sed -i "
        s/^\.\///g
        s/^\///g
        /^\./d
        /^ *$/d
        /^var\/log\/list\/.*\.list/d
        /^var\/log$/d
        s|info\/desc|var\/log\/desc\/${package}.desc|
    " "$temp_list"
}

_CREATE_PKG()
{
    echo -e "${blue}[Create]${end} Now, create package for You! Wait..."
    if tar cvJf ../${package}.${format_pkg} .; then
        echo -e "${blue}[Create]${end} Your Package on: ../${package}.${format_pkg}"
        ( # Subshell
          cd ..
          if sha256sum ${package}.${format_pkg} > ${package}.${format_pkg}.sha256; then
              echo -e "${blue}[Create]${end} Your MD5 on: ../${package}.${format_pkg}.sha256"
          fi
        )
    else
        echo -e "${red}[Error!]${end} No created ../${package}.${format_pkg}"
        exit 1
    fi
}

#==================INICIO
case $1 in
    -n|--name)
       shift # Rebaixando
       # Se nome do pacote não for letras ou se tiver
       # espaços entre outras coisas, não pode continuar.
       re="\.\<${format_pkg}\>"
       if ! [[ "$1" =~ ^.*${re} ]]; then
           echo -e "${red}[Error!]${end} Package need finish .$format_pkg"
           exit 1
       elif [[ "$(echo "$1" | grep -o '-' | wc -l)" -gt '1' || "$(echo "$1" | grep -o '-' | wc -l)" -lt '1'  ]]; then
           echo -e "${red}[Error!]${end} Unexpected ' - ' Count."
           echo "Use only two ' - ' In the name of your package."
           echo ""
           echo -e "Perfect Format name is: ${blue}name-version.mz${end}"
           echo "If you need separate name of package prefer use ' _ '"
           echo -e "Example: firefox_quantum${blue}-${end}54.8.9.mz"
           echo ""
           echo "If you need more help, use -h or --help"
           exit 1
       # Se nome do pacote ter números ou espaços não deve continuar
       elif [[ "$1" =~ .*([[:digit:]]+|[[:space:]]+).*-.* ]]; then
           echo -e "${red}[Error!]${end} Unexpected character."
           echo ""
           echo -e "Perfect Format name is: ${blue}name-version.mz${end}"
           echo "Dont use symbols, space, tab etc.. in name of package."
           exit 1
       else
            # Pegando somente nome do pacote
            # sem extensão
            package="${1/%.mz/}"
            # lista temporaria para usar nas funções
            # _LIST_ARCHIVES_DIRECTORIES e _CLEAN_LIST
            temp_list="/tmp/${package}.temp"
       fi
         # Verificação de tudo está aonde deveria estar, como diretório
         # (info) e o arquivo de descrição (desc)
         _VERIFY_ON
         # Iniciando processo de listagem de diretório
         # e limpeza no arquivo de listagem
         _LIST_ARCHIVES_DIRECTORIES || exit 1
         _CLEAN_LIST || exit 1
         # Se var/log/list existir apague, para criar um novo.
         if [[ -d "$local_list" ]]; then
             rm -r "$local_list" || { echo -e "${red}[ABORTED]${end} $local_list not removed."; exit 1 ;}
         fi
         # Criando novo diretorio para armazenar listagem
         [[ ! -d "$local_list" ]] && mkdir -p "$local_list"
         ( # Subshell
           cd "$local_list" || exit 1
           cp "$temp_list" "${package}.list" || exit 1
           echo -e "${pink}[MOVED]${end} $temp_list for ${local_list}${package}.list"
         )
         # Iniciando processo de criação do pacote
         _CREATE_PKG || exit 1
    ;;

    -c|--create-list)
       shift # Rebaixando
       if [[ "$(echo "$1" | grep -o '-' | wc -l)" -gt '1' || "$(echo "$1" | grep -o '-' | wc -l)" -lt '1'  ]]; then
           echo -e "${red}[Error!]${end} Unexpected ' - ' Count."
           echo "Use only two ' - ' In the name of your package."
           echo ""
           echo -e "Perfect Format name is: ${blue}name-version.mz${end}"
           echo "If you need separate name of package prefer use ' _ '"
           echo -e "Example: firefox_quantum${blue}-${end}54.8.9"
           echo ""
           echo "If you need more help, use -h or --help"
           exit 1
       elif [[ -z "$1" ]]; then
           echo -e "Name of list? Example: firefox_quantum${blue}-${end}54.8.9"
           exit 1
       else
           _LIST_ARCHIVES_DIRECTORIES || exit 1 # Chamada função
           _CLEAN_LIST || exit 1                # Chamada função
           mv -v "$temp_list" ${1}.list
       fi
    ;;

    -h|--help) _HELP_pt; exit 0 ;;
    *) echo "-h, --help"; exit 1 ;;
esac
